'fileTypes': [
  'elm'
]
'name': 'Elm'
'patterns': [
  {
    'captures':
      '1':
        'name': 'punctuation.definition.entity.elm'
      '2':
        'name': 'punctuation.definition.entity.elm'
    'match': '(`)[a-zA-Z_\']*?(`)'
    'comment': 'no more available in 0.18'
    'name': 'keyword.operator.function.infix.elm'
  }
  {
    'match': '\\(\\)'
    'name': 'constant.language.unit.elm'
  }
  {
    'match': '\\[\\]'
    'name': 'constant.language.empty-list.elm'
  }
  {
    'begin': '^\\b((effect|port)\\s+)?(module)\\s+'
    'beginCaptures':
      '1':
        'name': 'keyword.other.elm'
      '3':
        'name': 'keyword.other.elm'
    'end': '^$'
    'name': 'meta.declaration.module.elm'
    'comment': 'effect modules are basically not used in user applications'
    'patterns': [
      {
        'include': '#module_name_on_definition'
      }
      {
        'begin': '(where)\\s*\\{'
        'beginCaptures':
          '1':
            'name': 'keyword.other.elm'
        'end': '\\}'
        'comment': 'not available in 0.18'
        'patterns': [
          {
            'include': '#type_signature'
          }
        ]
      }
      {
        'match': '(exposing)'
        'name': 'keyword.other.elm'
      }
      {
        'include': '#module_exports'
      }
      {
        'match': '(where)'
        'comment': 'not available in 0.18'
        'name': 'keyword.other.elm'
      }
      {
        'match': '[a-z]+'
        'name': 'invalid'
      }
    ]
  }
  {
    'begin': '^\\b(import)\\s+((open)\\s+)?'
    'beginCaptures':
      '1':
        'name': 'keyword.other.elm'
      '3':
        'name': 'invalid'
    'end': '($|;)'
    'name': 'meta.import.elm'
    'comment': 'there are no more `open` keyword in 0.18, thus invalid'
    'patterns': [
      {
        'match': '(as|exposing)'
        'name': 'keyword.import.elm'
      }
      {
        'match': '\\(\\.\\.\\)'
        'name': 'import-wildcard.elm'
      }
      {
        'include': '#module_name'
      }
      {
        'include': '#module_exports'
      }
    ]
  }
  {
    'begin': '(\\[)(markdown)(\\|)'
    'beginCaptures':
      '1':
        'name': 'keyword.other.elm'
      '2':
        'name': 'support.function.prelude.elm'
      '3':
        'name': 'keyword.other.elm'
    'end': '(\\|\\])'
    'endCaptures':
      '1':
        'name': 'keyword.other.elm'
    'name': 'entity.markdown.elm'
    'patterns': [
      {
        'include': 'text.html.basic'
      }
    ]
  }
  {
    'name': 'meta.declaration.function.elm'
    'begin': '^((port\\s+)?([a-z][A-Za-z0-9_\']*)|(\\([|?!%$+:.=</>,-]+\\)))\\s+(:)\\s*'
    'beginCaptures':
      '2':
        'name': 'keyword.other.port.elm'
      '3':
        'name': 'entity.name.function.elm'
      '4':
        'name': 'entity.name.function.elm'
      '5':
        'name': 'keyword.other.definition.type.colon.elm'
    'end': '$|;'
    'comment': 'includes up to next line of function signature header line'
    'patterns': [
      {
        'include': '#type_signature'
      }
    ]
  }
  {
    'name': 'meta.lambda.function.elm'
    'begin': '(\\\\)'
    'beginCaptures':
      '1':
        'name': 'keyword.other.lambda.function.backslash.elm'
    'end': '(->)'
    'endCaptures':
      '1':
        'name': 'keyword.other.lambda.function.arrow.elm'
    'patterns': [
      {
        'match': '\\b(_)\\b'
        'captures':
          '1':
            'name': 'unused.comment.elm'
      }
    ]
  }
  {
    'name': 'meta.declaration.function.type_signature.wrapped.elm'
    'begin': '^\\s+(->)'
    'beginCaptures':
      '1':
        'name': 'keyword.other.arrow.elm'
    'end': '$|;'
    'patterns': [
      {
        'include': '#type_signature'
      }
    ]
  }
  {
    'match': '\\b(type|case|of|let|in|as|port|exposing|alias|infixr|export)\\s+'
    'name': 'keyword.other.elm'
  }
  {
    'match': '\\b(if|then|else)\\s+'
    'name': 'keyword.control.elm'
  }
  {
    'comment': 'Floats are always decimal'
    'match': '\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b'
    'name': 'constant.numeric.float.elm'
  }
  {
    'match': '\\b([0-9]+)\\b'
    'name': 'constant.numeric.elm'
  }
  {
    'include': '#std_library'
  }
  {
    'begin': '"""'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elm'
    'end': '"""'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elm'
    'name': 'string.quoted.triple.elm'
    'patterns': [
      {
        'match': '\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\"\'\\&]|x[0-9a-fA-F]{1,5})'
        'name': 'constant.character.escape.elm'
      }
      {
        'match': '\\^[A-Z@\\[\\]\\\\\\^_]'
        'name': 'constant.character.escape.control.elm'
      }
    ]
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elm'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elm'
    'name': 'string.quoted.double.elm'
    'patterns': [
      {
        'match': '\\\\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\\\\"\'\\&]|x[0-9a-fA-F]{1,5})'
        'name': 'constant.character.escape.elm'
      }
      {
        'match': '\\^[A-Z@\\[\\]\\\\\\^_]'
        'name': 'constant.character.escape.control.elm'
      }
    ]
  }
  {
    'captures':
      '1':
        'name': 'punctuation.definition.string.begin.elm'
      '2':
        'name': 'constant.character.escape.elm'
      '3':
        'name': 'punctuation.definition.string.end.elm'
    'match': '(?x)\n\t\t\t(\')\n\t\t\t(?:\n\t\t\t\t[\\ -\\[\\]-~]\t\t\t\t\t\t\t\t# Basic Char\n\t\t\t  | (\\\\(?:NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE\n\t\t\t\t\t|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS\n\t\t\t\t\t|US|SP|DEL|[abfnrtv\\\\\\"\'\\&]|x[0-9a-fA-F]{1,5}))\t\t# Escapes\n\t\t\t  | (\\^[A-Z@\\[\\]\\\\\\^_])\t\t\t\t\t\t# Control Chars\n\t\t\t)\n\t\t\t(\')\n\t\t\t'
    'name': 'string.quoted.single.elm'
  }
  {
    'match': '\\bport\\s+'
    'name': 'keyword.other.port.elm'
  }
  {
    'match': '\\b([A-Z][A-Za-z0-9_\']*)\\.'
    'name': 'module-namespace.elm'
    'captures':
      '1':
        'name': 'constant.other.elm'
  }
  {
    'match': '\\b([A-Z][A-Za-z0-9_\']*|\\(\\)|\\[\\])\\b'
    'name': 'support.type.prelude.elm'
  }
  {
    'include': '#comments'
  }
  {
    'match': '^[a-z][A-Za-z0-9_\']*\\s+'
    'name': 'entity.name.function.elm'
  }
  {
    'include': '#infix_op'
  }
  {
    'match': '->'
    'name': 'keyword.other.arrow.elm'
  }
  {
    'match': '[|!%$?~+:\\-.=</>&\\\\*^]+'
    'name': 'keyword.operator.elm'
  }
  {
    'match': ','
    'name': 'punctuation.separator.comma.elm'
  }
  {
    'match': '\\b(_)\\b'
    'captures':
      '1':
        'name': 'unused.comment.elm'
  }
]
'repository':
  'block_comment':
    'applyEndPatternLast': 1
    'begin': '\\{-(?!#)'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.elm'
    'end': '-\\}'
    'name': 'comment.block.elm'
    'patterns': [
      {
        'include': '#block_comment'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.comment.elm'
        'begin': '--'
        'end': '$'
        'name': 'comment.line.double-dash.elm'
      }
      {
        'include': '#block_comment'
      }
    ]
  'infix_op':
    'match': '(\\([+/*=.$<>:&|^?%#@~!-]+\\))'
    'name': 'entity.name.function.infix.elm'
  'module_exports':
    'begin': '\\('
    'end': '\\)'
    'name': 'meta.declaration.exports.elm'
    'patterns': [
      {
        'match': '\\b[a-z][a-zA-Z_\'0-9]*'
        'name': 'entity.name.function.elm'
      }
      {
        'match': '\\b[A-Z][A-Za-z_\'0-9]*'
        'name': 'support.type.prelude.elm'
      }
      {
        'match': ','
        'name': 'punctuation.separator.comma.elm'
      }
      {
        'match': '\\(\\.\\.\\)'
        'name': 'type-wildcard.elm'
      }
      {
        'include': '#infix_op'
      }
      {
        'include': '#subtype_in_exports'
      }
    ]
  'subtype_in_exports':
    'begin': '\\('
    'end': '\\)'
    'name': 'meta.type.prelude.elm'
    'patterns': [
      {
        'match': '\\b[A-Z][A-Za-z_\'0-9]+'
        'name': 'support.type.prelude.elm'
      }
      {
        'match': ','
        'name': 'punctuation.separator.comma.elm'
      }
    ]
  'module_name':
    'match': '[A-Z][A-Za-z._\']*'
    'name': 'variable.other.constant.elm'
  'module_name_on_definition':
    'match': '[A-Z][A-Za-z._\']*'
    'name': 'entity.name.type.module.elm'
  'type_signature':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'entity.other.inherited-class.elm'
          '2':
            'name': 'variable.other.generic-type.elm'
          '3':
            'name': 'keyword.other.big-arrow.elm'
        'match': '\\(\\s*([A-Z][A-Za-z]*)\\s+([a-z][A-Za-z_\']*)\\)\\s*(=>)'
        'name': 'meta.class-constraint.elm'
      }
      {
        'match': '->'
        'name': 'keyword.other.arrow.elm'
      }
      {
        'match': '=>'
        'name': 'keyword.other.big-arrow.elm'
        'comment': 'not available in 0.18'
      }
      {
        'match': '\\b([A-Z][a-zA-Z0-9_\']*)\\.\\b'
        'name': 'module-namespace-of-type.elm'
        'captures':
          '1':
            'name': 'variable.other.constant.elm'
      }
      {
        'match': '\\b[A-Z][a-zA-Z0-9_\']*\\b'
        'name': 'support.type.prelude.elm'
      }
      {
        'match': '([a-z][a-zA-Z0-9_\']*)\\s*(:)'
        'name': 'meta.other.record-type.elm'
        'captures':
          '1':
            'meta.other.record-type.key.elm'
          '2':
            'keyword.operator.elm'
      }
      {
        'match': '\\b[a-z][a-zA-Z0-9_\']*\\b'
        'name': 'variable.other.generic-type.elm'
      }
      {
        'match': '\\(\\)'
        'name': 'support.constant.unit.elm'
      }
      {
        'include': '#comments'
      }
    ]
  'std_library':
    'patterns': [
      {
        'include': '#basics'
      }
    ]
  'basics':
    'captures':
      '1':
        'name': 'variable.parameter'
      '2':
        'name': 'variable.parameter'
      '3':
        'name': 'support.function.elm'
    'match': '\\b(Basics)(.)(abs|acos|always|asin|atan|atan2|ceiling|clamp|compare|cos|curry|degrees|div|e|flip|floor|fromPolar|fst|id|isInfinite|isNaN|logBase|max|min|mod|not|otherwise|pi|radians|rem|round|sin|snd|sqrt|tan|toFloat|toPolar|truncate|turns|uncurry|xor|Order)\\b'
    'name': 'variable.parameter'
'scopeName': 'source.elm'
