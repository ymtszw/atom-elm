'fileTypes': [
  'elm'
]
'name': 'Elm'
'scopeName': 'source.elm'
'patterns': [
  {
    'match': '(`)[a-zA-Z_\']*?(`)'
    'captures':
      '1':
        'name': 'invalid.illegal'
      '2':
        'name': 'invalid.illegal'
    'comment': 'Function infixing. No longer supported as of 0.18'
    'name': 'keyword.operator.function.infix.elm'
  }
  {
    'match': '\\(\\)'
    'name': 'constant.language.unit.elm'
  }
  {
    'match': '\\[\\]'
    'name': 'constant.language.empty-list.elm'
  }
  {
    'begin': '^\\b((effect|port)\\s+)?(module)\\s+'
    'beginCaptures':
      '1':
        'name': 'keyword.other.elm'
      '3':
        'name': 'keyword.other.elm'
    'end': '^$' # Terminated by a blank line
    'name': 'meta.declaration.module.elm'
    'comment': 'Module declarations. Effect modules are basically not used in user applications though'
    'patterns': [
      {
        'include': '#module_name_on_definition'
      }
      {
        'match': '\\bexposing\\b'
        'name': 'keyword.other.elm'
      }
      {
        'include': '#module_exports'
      }
      {
        'match': 'where'
        'name': 'invalid.illegal'
        'comment': '`where` keyword is no longer supported in Elm'
      }
    ]
  }
  {
    'begin': '^(import)\\s+?'
    'beginCaptures':
      '1':
        'name': 'keyword.other.elm'
    'end': '$'
    'name': 'meta.import.elm'
    'comment': 'Import syntax.'
    'patterns': [
      {
        'match': '\\b(as|exposing)\\b'
        'name': 'keyword.import.elm'
      }
      {
        'match': '\\(\\.\\.\\)'
        'name': 'import-wildcard.elm'
      }
      {
        'include': '#module_name'
      }
      {
        'include': '#module_exports'
      }
    ]
  }
  {
    'begin': '\\[glsl\\|'
    'end': '(\\|\\])'
    'name': 'block.special.glsl.elm'
    'comment': 'Special code block for GLSL, allowed by Elm compiler.'
    'patterns': [
      {
        'include': 'source.glsl' # Require language-glsl for highlighting
      }
    ]
  }
  {
    'name': 'meta.declaration.function.elm'
    'comment': 'Function type annotations. Includes up to the next line of function signature header line'
    'begin': '^((port\\s+)?([a-z][A-Za-z0-9_\']*)|(\\([+/\\\\*=.$<>:&|^?%#@~!-]+\\)))\\s+(:)\\s*'
    'beginCaptures':
      '2':
        'name': 'keyword.other.port.elm'
      '3':
        'name': 'entity.name.function.elm'
      '4':
        'name': 'invalid.illegal'
        'comment': 'Custom infix operators. Prohibited in Elm 0.19'
      '5':
        'name': 'keyword.other.definition.type.colon.elm'
    'end': '$'
    'patterns': [
      {
        'include': '#type_signature'
      }
    ]
  }
  {
    'name': 'meta.lambda.function.elm'
    'begin': '(\\\\)'
    'beginCaptures':
      '1':
        'name': 'keyword.other.lambda.function.backslash.elm'
    'end': '(->)'
    'endCaptures':
      '1':
        'name': 'keyword.other.lambda.function.arrow.elm'
    'patterns': [
      {
        'include': '#type_tag_or_record_constructor'
      }
      {
        'match': '\\bas\\b'
        'name': 'keyword.other.elm'
      }
      {
        'include': '#unused_variable'
      }
    ]
  }
  {
    'name': 'meta.declaration.function.type_signature.wrapped.elm'
    'begin': '^\\s+(->)'
    'beginCaptures':
      '1':
        'name': 'keyword.other.arrow.elm'
    'end': '$'
    'patterns': [
      {
        'include': '#type_signature'
      }
    ]
  }
  {
    'match': '\\b(type|case|of|let|in|as|port|exposing|alias|infix[lr]|export)\\s+'
    'name': 'keyword.other.elm'
  }
  {
    'match': '\\b(if|then|else)\\s+'
    'name': 'keyword.control.elm'
  }
  {
    'match': '\\b([0-9]+\\.[0-9]+([eE][+-]?[0-9]+)?|[0-9]+[eE][+-]?[0-9]+)\\b'
    'name': 'constant.numeric.float.elm'
    'comment': 'Floats are always decimal'
  }
  {
    'match': '\\b0x[0-9a-fA-F]+\\b'
    'name': 'constant.numeric.elm'
    'comment': 'Hexiadecimal integer representation'
  }
  {
    'match': '\\b[0-9]+\\b'
    'name': 'constant.numeric.elm'
  }
  {
    'begin': '"""'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elm'
    'end': '"""'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elm'
    'name': 'string.quoted.triple.elm'
    'patterns': [
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '"'
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elm'
    'end': '"'
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elm'
    'name': 'string.quoted.double.elm'
    'patterns': [
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'begin': '\''
    'beginCaptures':
      '0':
        'name': 'punctuation.definition.string.begin.elm'
    'end': '\''
    'endCaptures':
      '0':
        'name': 'punctuation.definition.string.end.elm'
    'name': 'string.quoted.single.elm'
    'patterns': [
      {
        'include': '#escaped_char'
      }
    ]
  }
  {
    'match': '\\b([A-Z][A-Za-z0-9_\']*)\\.'
    'name': 'module-namespace.elm'
    'comment': 'Module names as namespaces. Ones followed by a period basically'
    'captures':
      '1':
        'name': 'constant.other.elm'
  }
  {
    'include': '#type_tag_or_record_constructor'
  }
  {
    'include': '#comments'
  }
  {
    'match': '^([a-z][A-Za-z0-9_]*|(\\([+/\\\\*=.$<>:&|^?%#@~!-]+\\)))\\s+'
    'captures':
      '2':
        'name': 'invalid.illegal'
        'comment': 'Custom infix operators cannot be defined by ordinary applications/packages as of Elm 0.19'
    'name': 'entity.name.function.elm'
    'comment': 'Function definitions. Note that port functions can only be defined with type annotations, not with actual implementations.'
  }
  {
    'include': '#infix_op'
  }
  {
    'match': '->'
    'name': 'keyword.other.arrow.elm'
  }
  {
    'match': '[+/\\\\*=.$<>:&|^?%#@~!-]+'
    'name': 'keyword.operator.elm'
  }
  {
    'match': ','
    'name': 'punctuation.separator.comma.elm'
  }
  {
    'include': '#unused_variable'
  }
]
'repository':
  'block_comment':
    'applyEndPatternLast': 1
    'begin': '\\{-\\|?'
    'captures':
      '0':
        'name': 'punctuation.definition.comment.elm'
    'end': '-\\}'
    'name': 'comment.block.elm'
    'patterns': [
      {
        'include': '#block_comment',
        'comment': 'Allow nesting of block_comment'
      }
    ]
  'comments':
    'patterns': [
      {
        'captures':
          '1':
            'name': 'punctuation.definition.comment.elm'
        'begin': '--'
        'end': '$'
        'name': 'comment.line.double-dash.elm'
      }
      {
        'include': '#block_comment'
      }
    ]
  'infix_op':
    'match': '(\\([+/\\\\*=.$<>:&|^?%#@~!-]+\\))'
    'name': 'entity.name.function.infix.elm'
  'module_exports':
    'begin': '\\('
    'end': '\\)'
    'name': 'meta.declaration.exports.elm'
    'patterns': [
      {
        'match': '\\b[a-z][a-zA-Z_\'0-9]*'
        'name': 'entity.name.function.elm'
      }
      {
        'include': '#type_tag_or_record_constructor'
      }
      {
        'match': ','
        'name': 'punctuation.separator.comma.elm'
      }
      {
        'match': '\\(\\.\\.\\)'
        'name': 'type-wildcard.elm'
      }
      {
        'include': '#infix_op'
      }
      {
        'include': '#subtype_in_exports'
      }
    ]
  'subtype_in_exports':
    'begin': '\\('
    'end': '\\)'
    'name': 'meta.type.elm'
    'patterns': [
      {
        'include': '#type_tag_or_record_constructor'
      }
      {
        'match': ','
        'name': 'punctuation.separator.comma.elm'
      }
    ]
  'module_name':
    'match': '[A-Z][A-Za-z0-9._\']*'
    'name': 'variable.other.constant.elm'
  'module_name_on_definition':
    'match': '[A-Z][A-Za-z0-9._\']*'
    'name': 'entity.name.type.module.elm'
  'type_tag_or_record_constructor':
    'match': '\\b[A-Z][A-Za-z_\'0-9]*'
    'name': 'support.type.elm'
  'type_signature':
    'patterns': [
      {
        'match': '->'
        'name': 'keyword.other.arrow.elm'
      }
      {
        'match': '=>'
        'name': 'invalid.illegal'
        'comment': 'Type constraints are not available in 0.18+'
      }
      {
        'match': '\\b([A-Z][a-zA-Z0-9_\']*)\\.\\b'
        'name': 'module-namespace-of-type.elm'
        'captures':
          '1':
            'name': 'variable.other.constant.elm'
      }
      {
        'include': '#type_tag_or_record_constructor'
      }
      {
        'match': '([a-z][a-zA-Z0-9_\']*)\\s*(:)'
        'name': 'meta.other.record-type.elm'
        'captures':
          '1':
            'meta.other.record-type.key.elm'
          '2':
            'keyword.operator.elm'
      }
      {
        'match': '\\b[a-z][a-zA-Z0-9_\']*\\b'
        'name': 'variable.other.generic-type.elm'
      }
      {
        'match': '\\(\\)'
        'name': 'support.constant.unit.elm'
      }
      {
        'include': '#comments'
      }
    ]
  'escaped_char':
    'match': '\\\\([nrt"\'\\\\]|u\\{[0-9a-fA-F]{4}\\})'
    'name': 'constant.character.escape.elm'
    'comment': 'Allowed escaped characters can be found in repl; try defining various strings with escaped characters in them'
  'unused_variable':
    'match': '\\b(_)\\b'
    'captures':
      '1':
        'name': 'unused.comment.elm'
